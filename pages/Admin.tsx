"use client";
import React from "react";

import Button from "@mui/material/Button";
import { useDispatch, useSelector } from "react-redux";
import Head from "next/head";

import edit from "../styles/edit.module.css";
import deletecss from "../styles/delete.module.css";

import { ThunkDispatch } from "redux-thunk";
import { AnyAction } from "redux";
import {
  deleteitem,
  getproducts,
  searchproductdata,
} from "../Features/productsslice";
import Navbar1 from "../Components/Navbar1";
import { Container } from "@mui/material";
import { RootState } from "../store";
import { useEffect, useState } from "react";
import { Modal, Tooltip } from "antd";
import { FloatButton } from "antd";
import { Input, Space, Select } from "antd";
import { Image } from "antd";

import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
} from "@mui/material";
import Updateproduct from "../Componentsapi/Updateproduct";
import { HeartOutlined, PlusOutlined } from "@ant-design/icons";
import Addproduct from "../Componentsapi/Addproduct";
import Loader from "../Components/Loader";

const Admin = () => {
  const { Option } = Select;
  const dispatch: ThunkDispatch<any, void, AnyAction> = useDispatch();

  const [id, setid] = useState();
  const [visibleItems, setVisibleItems] = useState(4);
  const apiproducts = useSelector(
    (state: RootState) => state.allcarts.apiproducts
  );
  const { isloading, searchdata } = useSelector(
    (state: RootState) => state.allcarts
  );
  const [showupdate, setshowupdate] = useState(false);
  const [deleteproduct, setdeleteproduct] = useState(false);
  const [addproducts, setaddproducts] = useState(false);
  const [search, setsearch] = useState();
  const [shownavbar, setshownavbar] = useState(true);
  const loadMoreButtonRef = React.useRef<HTMLInputElement>(null);
  const [imageview, setimageview] = useState(false);
  const [displaybutton, setdisplaybutton] = useState(false);
  const[itemadded,setitemadded] = useState(false);

  useEffect(() => {
    dispatch(getproducts());
  }, []);

  useEffect(() => {
    dispatch(searchproductdata(search));
  }, [search]);

  // Admin actions
  const handledelete = (userId: any) => {
    setid(userId);
    setdeleteproduct(true);
    console.log("userId", userId);
  };
  const confirmdelete = () => {
    dispatch(deleteitem(id));
    dispatch(getproducts());
    setdeleteproduct(false);
  };
  if (isloading) {
    return <Loader />;
  }
  const handleCancel = () => {
    setdeleteproduct(false);
  };
  const handleLoadMore = () => {
    setVisibleItems((prevVisibleItems) => prevVisibleItems + 8);
    setTimeout(() => {
      if (loadMoreButtonRef.current) {
        loadMoreButtonRef.current.scrollIntoView({
          behavior: "smooth",
          block: "end",
          inline: "nearest",
        });
      }
    }, 100);
  };

  // New

  // const handleImageClick = () => {
  //   setImageView(true);
  //   setshownavbar(false);
  // };

  // const handleCancelClick = () => {
  //   setImageView(false);
  //   setshownavbar(true);
  // };

  return (
    <>
      <Head>
        <title>Admin Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <style>
        {`
          

          .centered-container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100%;
          }
          .popup {
            position: fixed;
            top: -100px;
            left: -100px;
            transform: translateX(-50%);
            background-color: black;
            padding: 22px;
            border-radius: 4px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
            z-index: 9999;
            padding: 8px;
            animation: slideIn 0.3s ease-in-out forwards;
          }
          @keyframes slideIn {
            0% {
              top: 1%;
              left: 50%;
            }
            100% {
              top: 15%;
              left: 50%;
              transform: translateX(-50%);
            }
          }
          
           p{
            margin: 0;
            font-size: 22px;
            font-weight: 500;
            color:white;
          }
         
        
        `}
      </style>
      {itemadded &&  <div className="popup">
          <p>Item has been added üòÄ </p>
        </div>}

      {shownavbar && <Navbar1 />}
      <br />
      {displaybutton && (
        <Button
          onClick={() => {
            setshownavbar(true);
            setdisplaybutton(false);
          }}
          style={{ marginLeft: "43%", position: "fixed" }}
          variant="contained"
        >
          Show Navbar Controls
        </Button>
      )}
      {showupdate && <Updateproduct setshowupdate={setshowupdate} id={id} />}
      {deleteproduct && (
        <Modal
          title=""
          open={deleteproduct}
          onOk={confirmdelete}
          onCancel={handleCancel}
          centered={true}
          keyboard={true}
          okText="Yes"
        >
          <h3>Are you sure want to delete this Product ? ‚òπÔ∏è</h3>
        </Modal>
      )}
      <Tooltip title="Add product" placement="left" color="green">
        <FloatButton
          icon={<PlusOutlined />}
          onClick={() => setaddproducts(true)}
          style={{ float: "right", right: "25px", top: "111px" }}
        />
      </Tooltip>
      {addproducts && <Addproduct setaddproducts={setaddproducts} setitemadded={setitemadded} />}
      <br />
      <Select
        style={{
          width: 200,
          position: "absolute",
          left: "220px",
          border: "2px solid black",
          borderRadius: "8px",
        }}
        onChange={(value) => setsearch(value)}
        placeholder="Search Category..."
      >
        <Option value="">All</Option>
        <Option value="Mobiles">Mobiles</Option>
        <Option value="Watches">Watches</Option>
        <Option value="Headphones">Headphones</Option>
        <Option value="Accessories">Accessories</Option>
        <Option value="Speakers">Speakers</Option>
        <Option value="Tablets">Tablets</Option>
        <Option value="Laptops">Laptops</Option>
        <Option value="Macs">Macs</Option>
        <Option value="Displays">Displays</Option>
      </Select>{" "}
      <br />
      <br />
      <Container>
        <TableContainer component={Paper} sx={{ width: 1100 }}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell sx={{ fontSize: 18, fontWeight: 800 }} align="left">
                  ID
                </TableCell>
                <TableCell sx={{ fontSize: 18, fontWeight: 800 }} align="left">
                  Title
                </TableCell>
                <TableCell sx={{ fontSize: 18, fontWeight: 800 }} align="left">
                  Price
                </TableCell>
                <TableCell sx={{ fontSize: 18, fontWeight: 800 }} align="left">
                  Stock
                </TableCell>
                <TableCell sx={{ fontSize: 18, fontWeight: 800 }} align="left">
                  Category
                </TableCell>
                <TableCell sx={{ fontSize: 18, fontWeight: 800 }} align="left">
                  Image
                </TableCell>
                <TableCell
                  sx={{ fontSize: 18, fontWeight: 800 }}
                  colSpan={2}
                  align="left"
                >
                  Actions
                </TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {apiproducts &&
                apiproducts
                  .filter((item: any) => {
                    if (
                      typeof searchdata !== "string" ||
                      searchdata.length === 0
                    ) {
                      return item;
                    } else {
                      return item.category
                        .toLowerCase()
                        .includes(searchdata.toLowerCase());
                    }
                  })
                  .slice(0, visibleItems)
                  .map((details: any) => (
                    <TableRow key={details.id}>
                      <TableCell align="left" sx={{ fontWeight: 800 }}>
                        {details.id}.
                      </TableCell>
                      <TableCell align="left">{details.title}</TableCell>
                      <TableCell align="left">{details.price}</TableCell>
                      <TableCell align="left">{details.stock}</TableCell>
                      <TableCell align="left">{details.category}</TableCell>
                      <TableCell align="left" className="tableimage">
                        {/* <Image
                          width={40}
                          height={40}
                          src={details.img}
                          onClick={() => setshownavbar(false)}
                          preview={{
                            visible: ImageView,
                            onVisibleChange: (vis,current) => {
                              setimageview(vis);
                              setshownavbar(imageview);
                              console.log("current",current);
                              
                            },
                          }}
                        /> */}
                        <Image
                          width={40}
                          height={40}
                          src={details.img}
                          onClick={() => {
                            setshownavbar(false);
                            setdisplaybutton(true);
                          }}
                        />

                        {/* 3 */}
                        {/* <Image
                          width={40}
                          height={40}
                          src={details.img}
                          onClick={handleImageClick}
                          preview={{
                            visible: ImageView,
                            onVisibleChange: (visible, current) => {
                              setImageView(visible);
                              setshownavbar(visible);
                              console.log("current", current);
                            },
                          }}
                        />
                        {ImageView && (
        <div>
       
           <Modal>
            <button onClick={handleCancelClick}>Cancel</button>

           </Modal>
          
        </div> */}
                      </TableCell>

                      <TableCell
                        colSpan={2}
                        sx={{ display: "flex", gap: 2 }}
                        align="left"
                      >
                        <button
                          className={edit.edit}
                          onClick={() => {
                            setshowupdate(true);
                            setid(details.id);
                          }}
                        >
                          Edit <i className="fa-solid fa-pen-to-square"></i>
                        </button>

                        <button
                          className={deletecss.delete}
                          onClick={() => handledelete(details.id)}
                        >
                          Delete <i className="fa-solid fa-trash"></i>
                        </button>
                      </TableCell>
                    </TableRow>
                  ))}
            </TableBody>
          </Table>
        </TableContainer>
      </Container>
      <br />
      {visibleItems < apiproducts.length && (
        <div style={{ display: "flex", justifyContent: "center" }}>
          <Button variant="contained" onClick={handleLoadMore}>
            Load More Items
          </Button>
        </div>
      )}
    </>
  );
};

export default Admin;
