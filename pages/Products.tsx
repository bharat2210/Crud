import * as React from "react";
import Card from "@mui/material/Card";
import CardActions from "@mui/material/CardActions";
import CardContent from "@mui/material/CardContent";
import CardMedia from "@mui/material/CardMedia";
import Button from "@mui/material/Button";
import Typography from "@mui/material/Typography";
import Container from "@mui/material/Container";
import Navbar1 from "../Components/Navbar1";
import { useSelector, useDispatch } from "react-redux";
import Rating from "@mui/material/Rating";
import { useState } from "react";
import { Stack } from "@mui/material";
import Description from "../Components/Description";
import { addtocart } from "../Features/productsslice";
import Head from "next/head";
import Aos from "aos";
import { useRef } from "react";

const Products = () => {
  const items = useSelector((state: any) => state.allcarts.items);
  const [showdescription, setshowdescription] = useState(false);
  const [id, setId] = useState();
  const [visibleItems, setVisibleItems] = useState(4);
  const dispatch = useDispatch();
  
  const loadMoreButtonRef = React.useRef<HTMLInputElement>(null)
  const [showpopup, setshowpopup] = useState(false);
  React.useEffect(() => {
    Aos.init({ duration: 800 });
  }, [visibleItems]);

  const handleLoadMore = () => {
    setVisibleItems((prevVisibleItems) => prevVisibleItems + 4);
    setTimeout(() => {
      if (loadMoreButtonRef.current) {
        loadMoreButtonRef.current.scrollIntoView({
          behavior: "smooth",
          block: "end",
           inline: "nearest",
        });
      }
    }, 200);
  };
  const handleaddtocart = (values:any) => {
    dispatch(addtocart(values));
    setshowpopup(true);
    setTimeout(() => {
      setshowpopup(false);
    }, 1000);
  };

  return (
    <>
      <style>
        {`
      
      .popup {
        position: fixed;
        top: 10%;
        left: 50%;
        transform: translateX(-50%);
        background-color: #fff;
        padding: 20px;
        border-radius: 4px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
        z-index: 9999;
      }
      
      .popup p {
        margin: 0;
        font-size: 22px;
        color: #333;
      }
      
      
      
      `}
      </style>

      <Head>
        <title>Products Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {showdescription && (
        <Description setshowdescription={setshowdescription} id={id} />
      )}
      <Navbar1 />
      <br />
      <br />

      {showpopup && <div className="popup">Item has been added to Cart</div>}
      <Container
        maxWidth="xl"
        sx={{
          display: "flex",
          flexDirection: "row",
          flexWrap: "wrap",
          gap: "10px",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        {items.slice(0, visibleItems).map((item:any) => (
          <Card
            sx={{ height: 545, width: 300 }}
            key={item.id}
            data-aos="fade-up"
            className="card"
          >
            <CardMedia
              sx={{ height: 300, width: 300 }}
              image={item.img}
              title={item.title}
            />
            <CardContent>
              <Typography gutterBottom variant="h6" component="div">
                {item.title}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {item.description}
              </Typography>
              <Typography variant="h6" color="text.secondary">
                â‚¹ {item.price}
              </Typography>
              <Rating name="read-only" value={item.rating} readOnly />
            </CardContent>
            <CardActions>
              <Stack spacing={2} direction="row">
                <Button size="small" variant="contained">
                  Buy
                </Button>
                <Button size="small" onClick={() => handleaddtocart(item)} variant="outlined">
                  Add to Cart
                </Button>
                <Button
                  size="small"
                  onClick={() => {
                    setshowdescription(true);
                    setId(item.id);
                  }}
                >
                  Details
                </Button>
              </Stack>
            </CardActions>
          </Card>
        ))}
      </Container>
      <br />

      <div ref={loadMoreButtonRef}></div>
      {visibleItems < items.length && (
        <div style={{ display: "flex", justifyContent: "center" }}>
          <Button variant="contained" onClick={handleLoadMore}>
            Load More Items
          </Button>
        </div>
      )}
    </>
  );
};

export default Products;
